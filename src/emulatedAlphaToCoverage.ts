export const kNullEmulator =
  'fn emulatedAlphaToCoverage(alpha: f32, xy: vec2u) -> u32 { return 0; }';

/**
 * For each device name, provides the source for a WGSL function which emulates
 * the alpha-to-coverage algorithm of that device by mapping (alpha, x, y) to
 * a sample mask.
 */
export const kEmulatedAlphaToCoverage = {
  'NVIDIA GeForce RTX 3070': `\
    fn emulatedAlphaToCoverage(alpha: f32, xy: vec2u) -> u32 {
      if alpha <  253.0 / 2048.0 { return 0x0; }
      if alpha <  767.0 / 2048.0 { return 0x8; }
      if alpha < 1281.5 / 2048.0 { return 0x9; }
      if alpha < 1795.5 / 2048.0 { return 0xb; }
      return 0xf;
    }`,
  'Intel HD Graphics 4400': `\
    fn emulatedAlphaToCoverage(alpha: f32, xy: vec2u) -> u32 {
      if alpha <= 0.5 / 4.0 { return 0x0; }
      if alpha <= 1.5 / 4.0 { return 0x1; }
      if alpha <= 2.5 / 4.0 { return 0x3; }
      if alpha <= 3.5 / 4.0 { return 0x7; }
      return 0xf;
    }`,
  'Apple M1 Pro': `\
    fn emulatedAlphaToCoverage(alpha: f32, xy: vec2u) -> u32 {
      let i = (xy.y % 2) * 2 + (xy.x % 2);
      if alpha <   7.5 / 255.0 { return array(0x0, 0x0, 0x0, 0x0u)[i]; }
      if alpha <  23.5 / 255.0 { return array(0x1, 0x0, 0x0, 0x0u)[i]; }
      if alpha <  39.5 / 255.0 { return array(0x1, 0x0, 0x0, 0x1u)[i]; }
      if alpha <  55.5 / 255.0 { return array(0x1, 0x1, 0x0, 0x1u)[i]; }
      if alpha <  71.5 / 255.0 { return array(0x1, 0x1, 0x1, 0x1u)[i]; }
      if alpha <  87.5 / 255.0 { return array(0x9, 0x1, 0x1, 0x1u)[i]; }
      if alpha < 103.5 / 255.0 { return array(0x9, 0x1, 0x1, 0x9u)[i]; }
      if alpha < 119.5 / 255.0 { return array(0x9, 0x9, 0x1, 0x9u)[i]; }
      if alpha < 135.5 / 255.0 { return array(0x9, 0x9, 0x9, 0x9u)[i]; }
      if alpha < 151.5 / 255.0 { return array(0xb, 0x9, 0x9, 0x9u)[i]; }
      if alpha < 167.5 / 255.0 { return array(0xb, 0x9, 0x9, 0xbu)[i]; }
      if alpha < 183.5 / 255.0 { return array(0xb, 0xb, 0x9, 0xbu)[i]; }
      if alpha < 199.5 / 255.0 { return array(0xb, 0xb, 0xb, 0xbu)[i]; }
      if alpha < 215.5 / 255.0 { return array(0xf, 0xb, 0xb, 0xbu)[i]; }
      if alpha < 231.5 / 255.0 { return array(0xf, 0xb, 0xb, 0xfu)[i]; }
      if alpha < 247.5 / 255.0 { return array(0xf, 0xf, 0xb, 0xfu)[i]; }
      return 0xf;
    }`,
  'ARM Mali-G78': `\
    fn emulatedAlphaToCoverage(alpha: f32, xy: vec2u) -> u32 {
      let i = (xy.y % 2) * 2 + (xy.x % 2);
      if alpha <  0.5 / 16.0 { return array(0x0, 0x0, 0x0, 0x0u)[i]; }
      if alpha <  1.5 / 16.0 { return array(0x0, 0x8, 0x0, 0x0u)[i]; }
      if alpha <  2.5 / 16.0 { return array(0x1, 0x8, 0x0, 0x0u)[i]; }
      if alpha <  3.5 / 16.0 { return array(0x1, 0x8, 0x0, 0x1u)[i]; }
      if alpha <  4.5 / 16.0 { return array(0x1, 0x8, 0x8, 0x1u)[i]; }
      if alpha <  5.5 / 16.0 { return array(0x1, 0xa, 0x8, 0x1u)[i]; }
      if alpha <  6.5 / 16.0 { return array(0x5, 0xa, 0x8, 0x1u)[i]; }
      if alpha <  7.5 / 16.0 { return array(0x5, 0xa, 0x8, 0x5u)[i]; }
      if alpha <  8.5 / 16.0 { return array(0x5, 0xa, 0xa, 0x5u)[i]; }
      if alpha <  9.5 / 16.0 { return array(0x5, 0xe, 0xa, 0x5u)[i]; }
      if alpha < 10.5 / 16.0 { return array(0x7, 0xe, 0xa, 0x5u)[i]; }
      if alpha < 11.5 / 16.0 { return array(0x7, 0xe, 0xa, 0x7u)[i]; }
      if alpha < 12.5 / 16.0 { return array(0x7, 0xe, 0xe, 0x7u)[i]; }
      if alpha < 13.5 / 16.0 { return array(0x7, 0xf, 0xe, 0x7u)[i]; }
      if alpha < 14.5 / 16.0 { return array(0xf, 0xf, 0xe, 0x7u)[i]; }
      if alpha < 15.5 / 16.0 { return array(0xf, 0xf, 0xe, 0xfu)[i]; }
      return 0xf;
    }`,
  'AMD Radeon RX 580': `\
    fn emulatedAlphaToCoverage(alpha: f32, xy: vec2u) -> u32 {
      let i = (xy.y % 2) * 2 + (xy.x % 2);
      if alpha <  1 / 32.0 { return array(0x0, 0x0, 0x0, 0x0u)[i]; }
      if alpha <  2 / 32.0 { return array(0x4, 0x0, 0x0, 0x0u)[i]; }
      if alpha <  3 / 32.0 { return array(0x2, 0x0, 0x0, 0x0u)[i]; }
      if alpha <  4 / 32.0 { return array(0x2, 0x0, 0x0, 0x4u)[i]; }
      if alpha <  5 / 32.0 { return array(0x1, 0x0, 0x0, 0x4u)[i]; }
      if alpha <  6 / 32.0 { return array(0x1, 0x4, 0x0, 0x4u)[i]; }
      if alpha <  7 / 32.0 { return array(0x1, 0x4, 0x0, 0x2u)[i]; }

      if alpha <  9 / 32.0 { return array(0x1, 0x4, 0x4, 0x2u)[i]; }
      if alpha < 10 / 32.0 { return array(0x5, 0x4, 0x4, 0x2u)[i]; }
      if alpha < 11 / 32.0 { return array(0x5, 0x2, 0x4, 0x2u)[i]; }
      if alpha < 12 / 32.0 { return array(0x5, 0x2, 0x4, 0x6u)[i]; }
      if alpha < 13 / 32.0 { return array(0x5, 0x2, 0x4, 0x5u)[i]; }
      if alpha < 14 / 32.0 { return array(0x5, 0x6, 0x4, 0x5u)[i]; }
      if alpha < 15 / 32.0 { return array(0x5, 0x6, 0x2, 0x5u)[i]; }

      if alpha < 17 / 32.0 { return array(0x5, 0x6, 0x6, 0x5u)[i]; }
      if alpha < 18 / 32.0 { return array(0xd, 0x6, 0x6, 0x5u)[i]; }
      if alpha < 19 / 32.0 { return array(0x7, 0x6, 0x6, 0x5u)[i]; }
      if alpha < 20 / 32.0 { return array(0x7, 0x6, 0x6, 0xdu)[i]; }
      if alpha < 21 / 32.0 { return array(0x7, 0x5, 0x6, 0xdu)[i]; }
      if alpha < 22 / 32.0 { return array(0x7, 0xd, 0x6, 0xdu)[i]; }
      if alpha < 23 / 32.0 { return array(0x7, 0xd, 0x6, 0x7u)[i]; }

      if alpha < 25 / 32.0 { return array(0x7, 0xd, 0xe, 0x7u)[i]; }
      if alpha < 26 / 32.0 { return array(0xf, 0xd, 0xe, 0x7u)[i]; }
      if alpha < 27 / 32.0 { return array(0xf, 0x7, 0xe, 0x7u)[i]; }
      if alpha < 28 / 32.0 { return array(0xf, 0x7, 0xe, 0xfu)[i]; }
      if alpha < 29 / 32.0 { return array(0xf, 0x7, 0xd, 0xfu)[i]; }
      if alpha < 30 / 32.0 { return array(0xf, 0xf, 0xd, 0xfu)[i]; }
      if alpha < 31 / 32.0 { return array(0xf, 0xf, 0x7, 0xfu)[i]; }
      return 0xf;
    }`,
  'Qualcomm Adreno 630': `\
    fn emulatedAlphaToCoverage(alpha: f32, xy: vec2u) -> u32 {
      let i = (xy.y % 4) * 4 + (xy.x % 4);
      if alpha <   0.5 / 255.0 { return array(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0u)[i]; }
      if alpha <  15.5 / 255.0 { return array(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0u)[i]; }
      if alpha <  31.5 / 255.0 { return array(0x1, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0u)[i]; }
      if alpha <  47.5 / 255.0 { return array(0x2, 0x0, 0x1, 0x0, 0x0, 0x2, 0x0, 0x1, 0x4, 0x1, 0x8, 0x0, 0x0, 0x4, 0x0, 0x8u)[i]; }
      if alpha <  63.5 / 255.0 { return array(0x0, 0x2, 0x8, 0x1, 0x1, 0x4, 0x2, 0x8, 0x4, 0x2, 0x0, 0x2, 0x2, 0x0, 0x1, 0x4u)[i]; }
      if alpha <  79.5 / 255.0 { return array(0x4, 0x1, 0x2, 0x8, 0x8, 0x2, 0x1, 0x4, 0x2, 0x8, 0x4, 0x1, 0x1, 0x4, 0x8, 0x3u)[i]; }
      if alpha <  95.5 / 255.0 { return array(0x4, 0x9, 0x2, 0x5, 0x1, 0x4, 0x9, 0x2, 0x6, 0x1, 0x6, 0x8, 0x8, 0x2, 0x1, 0x4u)[i]; }
      if alpha < 111.5 / 255.0 { return array(0x2, 0x9, 0x4, 0x6, 0x9, 0x6, 0xa, 0x1, 0x6, 0x8, 0x4, 0x9, 0x9, 0x4, 0x9, 0x6u)[i]; }
      if alpha < 127.5 / 255.0 { return array(0x1, 0x6, 0x9, 0x6, 0x6, 0x9, 0x6, 0x9, 0x9, 0x6, 0x1, 0x6, 0x6, 0x9, 0x6, 0x9u)[i]; }
      if alpha < 143.5 / 255.0 { return array(0x6, 0x9, 0x6, 0x9, 0xd, 0x6, 0x9, 0x9, 0x6, 0x9, 0x6, 0xd, 0x9, 0x6, 0x9, 0x6u)[i]; }
      if alpha < 159.5 / 255.0 { return array(0x7, 0x9, 0xe, 0x9, 0x9, 0x7, 0x9, 0x6, 0xe, 0x9, 0x7, 0x9, 0x9, 0x6, 0x9, 0x6u)[i]; }
      if alpha < 175.5 / 255.0 { return array(0xe, 0x9, 0xe, 0x5, 0x7, 0xe, 0xd, 0xb, 0x6, 0x7, 0x9, 0xd, 0x9, 0xe, 0x7, 0xeu)[i]; }
      if alpha < 191.5 / 255.0 { return array(0xb, 0x6, 0xd, 0x7, 0xe, 0xd, 0x7, 0xb, 0xd, 0x7, 0xb, 0xe, 0x7, 0xb, 0xe, 0xdu)[i]; }
      if alpha < 207.5 / 255.0 { return array(0x7, 0xe, 0xf, 0xd, 0xb, 0x7, 0xd, 0xe, 0xe, 0xd, 0x7, 0xf, 0xf, 0xb, 0xe, 0x7u)[i]; }
      if alpha < 223.5 / 255.0 { return array(0xd, 0xf, 0xf, 0xb, 0xf, 0x7, 0xe, 0xf, 0xf, 0xb, 0xf, 0xe, 0xe, 0xd, 0x7, 0xfu)[i]; }
      if alpha < 239.5 / 255.0 { return array(0xf, 0xf, 0xf, 0xe, 0xf, 0xe, 0xf, 0xf, 0x7, 0xf, 0xf, 0xf, 0xf, 0xf, 0xd, 0xfu)[i]; }
      if alpha < 254.5 / 255.0 { return array(0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xb, 0xf, 0xf, 0xf, 0xf, 0xfu)[i]; }
      return 0xf;
    }`,
  '(generated from your device)': kNullEmulator,
};

export type DeviceName = keyof typeof kEmulatedAlphaToCoverage;

export const kEmulatedAlphaTest = `\
  fn emulatedAlphaToCoverage(alpha: f32, xy: vec2u) -> u32 {
    if (alpha < 0.5) { return 0; }
    return 0xf;
  }
`;
